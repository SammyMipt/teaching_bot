from __future__ import annotations
import logging
from typing import Any, Dict, List
from aiogram import Router, F
from aiogram.types import Message
from app.services.users_service import UsersService

try:
    from app.bot.middlewares.actor_middleware import get_actor_id_for  # type: ignore
except Exception:
    def get_actor_id_for(owner_tg_id: int):
        return None

router = Router(name="common")
log = logging.getLogger(__name__)

def _is_nan(v: Any) -> bool:
    try:
        return isinstance(v, float) and v != v
    except Exception:
        return False

def _s(v: Any) -> str:
    if v is None or _is_nan(v):
        return ""
    return str(v)

def _role_of(user: Dict | None) -> str:
    return (user or {}).get("role", "unknown")

def _full_name(user: Dict | None) -> str:
    if not user:
        return "‚Äî"
    first = _s(user.get("first_name"))
    last  = _s(user.get("last_name"))
    name = (first + " " + last).strip()
    if not name:
        return _s(user.get("username")) or "‚Äî"
    return name

def _help_for_role(role: str) -> List[str]:
    base = ["/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "/help ‚Äî –ø–æ–º–æ—â—å", "/whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID/—Ä–æ–ª—å"]
    if role == "student":
        base += ["/register ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ä–æ—Å—Ç–µ—Ä—É", "/slots ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –∏ –∑–∞–ø–∏—Å—å",
                 "/submit [task_id] ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", "/grades ‚Äî –º–æ–∏ –æ—Ü–µ–Ω–∫–∏", "/feedback ‚Äî –æ—Ç–∑—ã–≤"]
    if role in ("ta", "owner"):
        base += ["/register_ta ‚Äî –∑–∞—è–≤–∫–∞ TA", "/schedule ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                 "/myslots ‚Äî –º–æ–∏ —Å–ª–æ—Ç—ã", "/myslots_manage ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏"]
    if role == "owner":
        base += ["/setrole <tg_id> <role>", "/ta_pending ‚Äî –∑–∞—è–≤–∫–∏ TA",
                 "/impersonate <tg_id|student_code=...>", "/impersonate_off",
                 "/dev_user_role <tg_id> <role>", "/dev_user_del <tg_id>"]
    return base

def _resolve_actor_tg_id(message: Message) -> int:
    real_id = message.from_user.id
    try:
        target = get_actor_id_for(real_id)
    except Exception:
        target = None
    return target or real_id

@router.message(F.text == "/start")
async def start(message: Message, users: UsersService):
    actor_id = _resolve_actor_tg_id(message)
    actor_user = users.get_by_tg(actor_id)
    actor_role = _role_of(actor_user)
    is_imp = actor_id != message.from_user.id
    lines = ["üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —É—á–µ–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫—É—Ä—Å–∞.", f"–í–∞—à–∞ —Ä–æ–ª—å: **{actor_role}**"]
    if is_imp:
        lines.append(f"(–∏–º–ø–µ—Ä—Å–æ–Ω–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞; –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –∫–∞–∫ tg_id={actor_id})")
    if actor_role == "student":
        lines.append("–ù–∞—á–Ω–∏—Ç–µ —Å /slots –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /submit [task_id].")
    elif actor_role == "ta":
        lines.append("–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ /schedule –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ /myslots.")
    elif actor_role == "owner":
        lines.append("–î–ª—è —Ç–µ—Å—Ç–æ–≤ –µ—Å—Ç—å /impersonate. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî /ta_pending, /setrole.")
    else:
        lines.append("–ï—Å–ª–∏ –≤—ã —Å—Ç—É–¥–µ–Ω—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ä–æ—Å—Ç–µ—Ä—É.")
    await message.answer("\n".join(lines))

@router.message(F.text == "/help")
async def help_cmd(message: Message, users: UsersService):
    actor_id = _resolve_actor_tg_id(message)
    role = _role_of(users.get_by_tg(actor_id))
    text = "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(f"‚Ä¢ {x}" for x in _help_for_role(role))
    await message.answer(text, parse_mode=None)  # <‚Äî –¥–æ–±–∞–≤–∏–ª–∏ parse_mode=None

@router.message(F.text == "/whoami")
async def whoami(message: Message, users: UsersService):
    real_tg_id = message.from_user.id
    actor_tg_id = _resolve_actor_tg_id(message)
    is_impersonation = (actor_tg_id != real_tg_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    real_user = users.get_by_tg(real_tg_id)
    real_role = _role_of(real_user)
    real_name = _full_name(real_user)
    real_id = _s(real_user.get("id") if real_user else "")
    
    lines = [
        f"üë§ <b>RealID:</b> {real_tg_id} | role={real_role} | name={real_name}"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if real_id:
        lines.append(f"    ID: {real_id}")
    
    if is_impersonation:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–º–ø–µ—Ä—Å–æ–Ω–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        actor_user = users.get_by_tg(actor_tg_id)
        actor_role = _role_of(actor_user)
        actor_name = _full_name(actor_user)
        actor_id = _s(actor_user.get("id") if actor_user else "")
        
        lines.append(f"üé≠ <b>ActingID:</b> {actor_tg_id} | role={actor_role} | name={actor_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if actor_id:
            lines.append(f"    ID: {actor_id}")
        else:
            lines.append(f"    ID: ‚Äî")
    else:
        lines.append("üé≠ <b>ActingID:</b> ‚Äî")
    
    await message.answer("\n".join(lines), parse_mode="HTML")
