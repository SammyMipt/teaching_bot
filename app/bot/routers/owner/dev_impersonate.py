from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message
from app.bot.middlewares.actor_middleware import set_impersonation, clear_impersonation
from app.services.users_service import UsersService

router = Router(name="owner_dev_impersonate")

def _is_owner(message: Message, owner_id: int) -> bool:
    return message.from_user.id == owner_id

@router.message(F.text.startswith("/impersonate_off"))
async def impersonate_off(message: Message, owner_id: int):
    if not _is_owner(message, owner_id):
        await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫—É—Ä—Å–∞.")
        return
    clear_impersonation(message.from_user.id)
    await message.answer("üü¶ –ò–º–ø–µ—Ä—Å–æ–Ω–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏.")

@router.message(F.text.startswith("/impersonate"))
async def impersonate(message: Message, users: UsersService, owner_id: int):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–º–ø–µ—Ä—Å–æ–Ω–∞—Ü–∏—è:
      /impersonate 123456789            ‚Äî –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞–∫ tg_id (–µ—Å–ª–∏ –Ω–µ—Ç –≤ users.csv ‚Äî –æ–∫, –±—É–¥–µ—Ç–µ 'unknown' –¥–æ /register)
      /impersonate student_code=IU-001  ‚Äî –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ student_code
    """
    if not _is_owner(message, owner_id):
        await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫—É—Ä—Å–∞.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /impersonate <tg_id | student_code=...>")
        return
    arg = parts[1].strip()

    target_row = None
    target_tg_id = None

    if arg.isdigit():
        target_tg_id = int(arg)
        target_row = users.get_by_tg(target_tg_id)  # –º–æ–∂–µ—Ç –±—ã—Ç—å None ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    elif arg.lower().startswith("student_code="):
        code = arg.split("=", 1)[1].strip()
        # –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ student_code
        if hasattr(users, "get_by_student_code"):
            target_row = users.get_by_student_code(code)
            if target_row:
                target_tg_id = int(target_row["tg_id"])
        if target_tg_id is None:
            await message.answer("–ù–µ –Ω–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º student_code.")
            return
    else:
        await message.answer("–§–æ—Ä–º–∞—Ç: /impersonate <tg_id | student_code=...>")
        return

    set_impersonation(message.from_user.id, target_tg_id)
    if target_row:
        await message.answer(
            "üü© –ò–º–ø–µ—Ä—Å–æ–Ω–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –∫–∞–∫: {target_row.get('first_name','')} {target_row.get('last_name','')} "
            f"(role={target_row.get('role','unknown')}, tg_id={target_tg_id}).\n"
            "–û—Ç–∫–ª—é—á–∏—Ç—å: /impersonate_off"
        )
    else:
        await message.answer(
            "üü© –ò–º–ø–µ—Ä—Å–æ–Ω–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞.\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç–µ –∫–∞–∫ tg_id={target_tg_id}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (role=unknown).\n"
            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ /register –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ä–æ—Å—Ç–µ—Ä—É."
        )

@router.message(F.text.startswith("/dev_user_role"))
async def dev_user_role(message: Message, users: UsersService, owner_id: int):
    if message.from_user.id != owner_id:
        await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫—É—Ä—Å–∞.")
        return
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /dev_user_role <tg_id> <role>")
        return
    try:
        tg_id = int(parts[1])
    except Exception:
        await message.answer("tg_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    role = parts[2]
    users.upsert_basic(tg_id=tg_id, role=role)
    await message.answer(f"‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: tg_id={tg_id}, role={role}")

@router.message(F.text.startswith("/dev_user_del"))
async def dev_user_del(message: Message, users: UsersService, owner_id: int):
    if message.from_user.id != owner_id:
        await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫—É—Ä—Å–∞.")
        return
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /dev_user_del <tg_id>")
        return
    try:
        tg_id = int(parts[1])
    except Exception:
        await message.answer("tg_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ CSV —á–µ—Ä–µ–∑ pandas (CsvTable –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç delete —è–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º).
    table = users.table
    df = table.read()
    if not df.empty:
        df = df[df["tg_id"].astype(str) != str(tg_id)]
        with table.lock:
            df.to_csv(table.path, index=False)
        await message.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å tg_id={tg_id} –∏–∑ users.csv")
    else:
        await message.answer("–í users.csv –ø–æ–∫–∞ –ø—É—Å—Ç–æ ‚Äî —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.")

@router.message(F.text.startswith("/set_student_id"))
async def set_student_id(message: Message, users: UsersService, owner_id: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å student_code (ID) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /set_student_id [tg_id] [student_code]"""
    if message.from_user.id != owner_id:
        await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫—É—Ä—Å–∞.")
        return
        
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /set_student_id [tg_id] [student_code]")
        return
        
    try:
        tg_id = int(parts[1])
        student_code = parts[2]
    except ValueError:
        await message.answer("tg_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    user = users.get_by_tg(tg_id)
    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º student_code (–ø–æ–ª–µ id)
    updated_user = users.upsert_basic(
        tg_id=tg_id,
        role=user.get('role'),
        first_name=user.get('first_name', ''),
        last_name=user.get('last_name', ''),
        username=user.get('username', ''),
        email=user.get('email', ''),
        id=student_code
    )
    
    await message.answer(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω student_code '<b>{student_code}</b>' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}\n"
        f"üë§ {user.get('first_name', '')} {user.get('last_name', '')} ({user.get('role', 'unknown')})",
        parse_mode="HTML"
    )

@router.message(F.text.startswith("/set_ta_id"))
async def set_ta_id(message: Message, users: UsersService, owner_id: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TA ID –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: /set_ta_id [tg_id] [ta_code]"""
    if message.from_user.id != owner_id:
        await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫—É—Ä—Å–∞.")
        return
        
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /set_ta_id [tg_id] [ta_code]")
        return
        
    try:
        tg_id = int(parts[1])
        ta_code = parts[2]
    except ValueError:
        await message.answer("tg_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    user = users.get_by_tg(tg_id)
    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º TA –∫–æ–¥ (–ø–æ–ª–µ id)
    updated_user = users.upsert_basic(
        tg_id=tg_id,
        role=user.get('role'),
        first_name=user.get('first_name', ''),
        last_name=user.get('last_name', ''),
        username=user.get('username', ''),
        email=user.get('email', ''),
        id=ta_code
    )
    
    await message.answer(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TA –∫–æ–¥ '<b>{ta_code}</b>' –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {tg_id}\n"
        f"üë§ {user.get('first_name', '')} {user.get('last_name', '')} ({user.get('role', 'unknown')})",
        parse_mode="HTML"
    )