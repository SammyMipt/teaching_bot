from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message
from app.services.weeks_service import WeeksService
from datetime import timedelta

router = Router(name="owner_weeks_admin")

@router.message(F.text.startswith("/weeks_import"))
async def weeks_import(message: Message, weeks: WeeksService, owner_id: int):
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞
    /weeks_import [–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É]
    """
    if message.from_user.id != owner_id:
        await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫—É—Ä—Å–∞.")
        return
    
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "–§–æ—Ä–º–∞—Ç: /weeks_import [–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É]\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /weeks_import data/Weeks_CSV_Preview.csv"
        )
        return
    
    file_path = parts[1].strip()
    
    try:
        weeks.populate_from_csv(file_path)
        await message.answer(f"‚úÖ –ù–µ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ {file_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        weeks_list = weeks.list_all_weeks()
        if not weeks_list.empty:
            lines = ["üìö –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏:"]
            for _, row in weeks_list.head(5).iterrows():  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                status = row["status_emoji"]
                lines.append(f"{status} {row['week']}. {row['title']} (–¥–æ {row['deadline_date'].strftime('%d.%m')})")
            
            if len(weeks_list) > 5:
                lines.append(f"... –∏ –µ—â–µ {len(weeks_list) - 5} –Ω–µ–¥–µ–ª—å")
                
            await message.answer("\n".join(lines))
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")

@router.message(F.text == "/weeks_list")
async def weeks_list(message: Message, weeks: WeeksService, owner_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–¥–µ–ª—å"""
    if message.from_user.id != owner_id:
        await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫—É—Ä—Å–∞.")
        return
    
    weeks_df = weeks.list_all_weeks()
    if weeks_df.empty:
        await message.answer("üìö –ù–µ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /weeks_import")
        return
    
    lines = ["üìö –í—Å–µ –Ω–µ–¥–µ–ª–∏ –∫—É—Ä—Å–∞:"]
    for _, row in weeks_df.iterrows():
        status = row["status_emoji"]
        deadline_str = row["deadline_date"].strftime('%d.%m.%Y')
        lines.append(f"{status} **{row['week']}. {row['title']}**")
        lines.append(f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_str}")
        lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_text = "\n".join(lines)
    if len(full_text) > 4000:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
        current_message = lines[0] + "\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        for line in lines[1:]:
            if len(current_message + line + "\n") > 4000:
                await message.answer(current_message)
                current_message = line + "\n"
            else:
                current_message += line + "\n"
        
        if current_message.strip():
            await message.answer(current_message)
    else:
        await message.answer(full_text)

@router.message(F.text.startswith("/week_info"))
async def week_info(message: Message, weeks: WeeksService, owner_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏"""
    if message.from_user.id != owner_id:
        await message.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫—É—Ä—Å–∞.")
        return
    
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /week_info [–Ω–æ–º–µ—Ä_–Ω–µ–¥–µ–ª–∏]")
        return
    
    try:
        week_number = int(parts[1])
    except ValueError:
        await message.answer("–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    week_info = weeks.get_week(week_number)
    if not week_info:
        await message.answer(f"–ù–µ–¥–µ–ª—è {week_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    status_text = "üî¥" if week_info["is_overdue"] else "üü¢"
    
    text = f"üìã **–ù–µ–¥–µ–ª—è {week_number}: {week_info['title']}**\n\n" \
           f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{week_info['description']}\n\n" \
           f"üìÖ **–î–µ–¥–ª–∞–π–Ω:** {week_info['deadline_str']} ({status_text})\n\n" \
           f"üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:**\n" \
           f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ' if week_info['is_overdue'] else '–ê–∫—Ç—É–∞–ª—å–Ω–æ'}\n" \
           f"‚Ä¢ –î–µ–¥–ª–∞–π–Ω: {week_info['deadline_date']}"
    
    await message.answer(text)