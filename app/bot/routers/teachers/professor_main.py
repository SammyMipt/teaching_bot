"""
–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º UX —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
1. –ï–¥–∏–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–°—Ç—É–¥–µ–Ω—Ç—ã" –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–ª–æ—Ç–∞
"""

from __future__ import annotations
import logging
from datetime import datetime, timezone, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import copy

# Services
from app.services.users_service import UsersService
from app.services.slot_service import SlotService
from app.services.booking_service import BookingService
from app.services.ta_prefs_service import TaPrefsService
from app.services.weeks_service import WeeksService
from app.services.grade_service import GradeService
from app.services.submission_service import SubmissionService
from app.services.audit_service import AuditService

router = Router(name="professors_main")
log = logging.getLogger(__name__)

# ================================================================================================
# FSM STATES
# ================================================================================================

class ProfessorFSM(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    sched_create_dates = State()
    sched_create_time = State() 
    sched_create_len = State()
    sched_create_cap = State()
    sched_create_confirm = State()
    material_upload_wait_file = State()

# ================================================================================================
# CALLBACK DATA HELPERS
# ================================================================================================

def parse_callback(callback_data: str) -> dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ callback_data"""
    result = {}
    try:
        parts = callback_data.split(";")
        for part in parts:
            if "=" in part:
                key, value = part.split("=", 1)
                result[key] = value
    except Exception as e:
        log.error(f"Error parsing callback data: {callback_data}, error: {e}")
    return result

def get_slot_display_status(slot_dict: dict, current_bookings: int) -> dict:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    capacity = int(slot_dict.get("capacity", 1))
    is_open = slot_dict.get("is_open", True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à—ë–ª –ª–∏ —Å–ª–æ—Ç
    try:
        slot_date = slot_dict.get("date")
        slot_time = slot_dict.get("time_to", slot_dict.get("time_from"))
        if slot_date and slot_time:
            slot_dt = datetime.fromisoformat(f"{slot_date}T{slot_time}:00+03:00")
            now = datetime.now(timezone(timedelta(hours=3)))
            if slot_dt < now:
                return {"emoji": "‚ö´", "status": "pasted", "text": "–ü—Ä–æ—à—ë–ª"}
    except:
        pass
    
    if not is_open:
        return {"emoji": "‚ö™", "status": "closed", "text": "–ó–∞–∫—Ä—ã—Ç"}
    elif current_bookings >= capacity:
        return {"emoji": "üî¥", "status": "full", "text": "–ó–∞–Ω—è—Ç"}
    elif current_bookings > 0:
        return {"emoji": "üü°", "status": "partial", "text": "–ß–∞—Å—Ç–∏—á–Ω–æ —Å–≤–æ–±–æ–¥–µ–Ω"}
    else:
        return {"emoji": "üü¢", "status": "free", "text": "–°–≤–æ–±–æ–¥–µ–Ω"}

# ================================================================================================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ================================================================================================

@router.message(F.text == "/professor") 
async def professor_main_menu(
    message: Message,
    actor_tg_id: int,
    users: UsersService
):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    user = users.get_by_tg(actor_tg_id)
    if not user or user.get("role") not in ("ta", "owner"):
        await message.answer(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /register_ta"
        )
        return
    
    kb = InlineKeyboardBuilder()
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ï–¥–∏–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="r=t;a=sched_create_start")
    kb.button(text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="r=t;a=sched_manage_main")
    kb.button(text="üìö –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="r=t;a=materials_main")
    kb.button(text="üë®‚Äçüéì –°–¥–∞—á–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="r=t;a=submissions_main")
    kb.adjust(1)
    
    teacher_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
    if not teacher_name:
        teacher_name = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    
    text = f"üë®‚Äçüè´ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {teacher_name}!</b>\n\nüìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    await message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")

@router.callback_query(F.data == "r=t;a=back_to_main")
async def back_to_main_handler(cb: CallbackQuery, actor_tg_id: int, users: UsersService):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await cb.answer()
    
    user = users.get_by_tg(actor_tg_id)
    if not user or user.get("role") not in ("ta", "owner"):
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="r=t;a=sched_create_start")
    kb.button(text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="r=t;a=sched_manage_main")
    kb.button(text="üìö –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="r=t;a=materials_main")
    kb.button(text="üë®‚Äçüéì –°–¥–∞—á–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="r=t;a=submissions_main")
    kb.adjust(1)
    
    teacher_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
    if not teacher_name:
        teacher_name = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    
    text = f"üë®‚Äçüè´ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {teacher_name}!</b>\n\nüìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")

# ================================================================================================
# ‚ûï –°–û–ó–î–ê–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø
# ================================================================================================

@router.callback_query(F.data == "r=t;a=sched_create_start")
async def sched_create_start_handler(cb: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –Ω–∞—á–∞–ª–æ –º–∞—Å—Ç–µ—Ä–∞"""
    await cb.answer()
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã", callback_data="r=t;a=sched_pick_dates")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=back_to_main")
    kb.adjust(1)
    
    text = (
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        "–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n\n"
        "–í—ã —Å–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å:\n"
        "‚Ä¢ –î–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç\n"
        "‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø—Ä–∏—ë–º–∞\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–ª–æ—Ç\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞"
    )
    
    await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")

# ================================================================================================
# üìÖ –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú
# ================================================================================================

@router.callback_query(F.data == "r=t;a=sched_manage_main")
async def sched_manage_main_handler(
    cb: CallbackQuery,
    actor_tg_id: int,
    users: UsersService,
    slots: SlotService
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º - –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    await cb.answer()
    
    ta_id = users.get_ta_id_by_tg(actor_tg_id)
    if not ta_id:
        await cb.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à TA ID")
        return
    
    try:
        slots_df = slots.table.read()
        if slots_df.empty:
            text = "üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="r=t;a=sched_create_start")
            kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=back_to_main")
            kb.adjust(1)
            await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
            return
        
        teacher_slots = slots_df[slots_df["ta_id"] == ta_id]
        if teacher_slots.empty:
            text = "üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="r=t;a=sched_create_start")
            kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=back_to_main")
            kb.adjust(1)
            await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        unique_dates = teacher_slots["date"].unique()
        unique_dates = sorted(unique_dates)
        
        kb = InlineKeyboardBuilder()
        for date_str in unique_dates[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–∞—Ç
            try:
                date_obj = datetime.fromisoformat(date_str).date()
                formatted_date = date_obj.strftime("%d.%m.%Y")
                date_slots = teacher_slots[teacher_slots["date"] == date_str]
                slots_count = len(date_slots)
                
                kb.button(
                    text=f"üìÖ {formatted_date} ({slots_count} —Å–ª–æ—Ç–æ–≤)",
                    callback_data=f"r=t;a=slot_list;d={date_str.replace('-', '')}"
                )
            except Exception as e:
                log.error(f"Error processing date {date_str}: {e}")
        
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=back_to_main")
        kb.adjust(1)
        
        text = "üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞–º–∏:"
        await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        
    except Exception as e:
        log.error(f"Error in sched_manage_main: {e}")
        await cb.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

# ================================================================================================
# –°–ü–ò–°–û–ö –°–õ–û–¢–û–í –ò –ö–ê–†–¢–û–ß–ö–ê –°–õ–û–¢–ê
# ================================================================================================

@router.callback_query(F.data.regexp(r"r=t;a=slot_list;d=\d{8}"))
async def slot_list_handler(
    cb: CallbackQuery,
    actor_tg_id: int,
    users: UsersService,
    slots: SlotService,
    bookings: BookingService
):
    """–°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É"""
    await cb.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        data = parse_callback(cb.data)
        date_str = data.get("d", "")
        
        if not date_str:
            await cb.message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
    except Exception:
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
    try:
        date_obj = datetime.strptime(date_str, "%Y%m%d").date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        iso_date = date_obj.isoformat()
    except ValueError:
        await cb.message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
        return
    
    ta_id = users.get_ta_id_by_tg(actor_tg_id)
    if not ta_id:
        await cb.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à TA ID")
        return
    
    try:
        slots_df = slots.table.read()
        if slots_df.empty:
            await cb.message.edit_text("‚ùå –°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        date_slots = slots_df[
            (slots_df["ta_id"] == ta_id) & 
            (slots_df["date"] == iso_date)
        ]
        
        if date_slots.empty:
            await cb.message.edit_text(f"üìÖ –ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –Ω–∞ {formatted_date}")
            return
        
        kb = InlineKeyboardBuilder()
        date_slots = date_slots.sort_values("time_from")
        
        for _, slot_row in date_slots.iterrows():
            slot_id = slot_row["slot_id"]
            time_from = slot_row["time_from"]
            time_to = slot_row["time_to"]
            capacity = int(slot_row.get("capacity", 1))
            
            # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
            try:
                bookings_df = bookings.table.read()
                if not bookings_df.empty:
                    slot_bookings = bookings_df[bookings_df["slot_id"] == slot_id]
                    active_bookings = slot_bookings[
                        slot_bookings["status"].str.lower().isin(["active", "confirmed"])
                    ] if "status" in slot_bookings.columns else slot_bookings
                    current_bookings = len(active_bookings)
                else:
                    current_bookings = 0
            except Exception:
                current_bookings = 0
            
            slot_dict = slot_row.to_dict()
            status_info = get_slot_display_status(slot_dict, current_bookings)
            
            button_text = f"{status_info['emoji']} {time_from}‚Äì{time_to} | {current_bookings}/{capacity}"
            
            kb.button(
                text=button_text,
                callback_data=f"r=t;a=slot_card;s={slot_id}"
            )
        
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=sched_manage_main")
        kb.adjust(1)
        
        text = f"üìÖ <b>–°–ª–æ—Ç—ã –Ω–∞ {formatted_date}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
        await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        
    except Exception as e:
        log.error(f"Error in slot_list: {e}")
        await cb.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("r=t;a=slot_card;s="))
async def slot_card_handler(
    cb: CallbackQuery,
    slots: SlotService,
    bookings: BookingService
):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–ª–æ—Ç–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    await cb.answer()
    
    try:
        data = parse_callback(cb.data)
        slot_id = data.get("s", "")
        
        if not slot_id:
            await cb.message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        found, slot_dict = slots.get_slot_by_id(slot_id)
        if not found:
            await cb.message.edit_text("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
        current_bookings = 0
        try:
            bookings_df = bookings.table.read()
            if not bookings_df.empty:
                slot_bookings = bookings_df[bookings_df["slot_id"] == slot_id]
                active_bookings = slot_bookings[
                    slot_bookings["status"].str.lower().isin(["active", "confirmed"])
                ] if "status" in slot_bookings.columns else slot_bookings
                current_bookings = len(active_bookings)
        except Exception:
            pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
        date = slot_dict.get("date", "")
        time_from = slot_dict.get("time_from", "")
        time_to = slot_dict.get("time_to", "")
        capacity = int(slot_dict.get("capacity", 1))
        location = slot_dict.get("location", "–æ–Ω–ª–∞–π–Ω")
        
        status_info = get_slot_display_status(slot_dict, current_bookings)
        
        text = (
            f"<b>–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–ª–æ—Ç–∞</b>\n\n"
            f"‚è∞ {time_from}‚Äì{time_to} | {date}\n"
            f"üë• {current_bookings}/{capacity} | –°—Ç–∞—Ç—É—Å: {status_info['emoji']} {status_info['text']}\n"
            f"üìç {location}\n"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        kb = InlineKeyboardBuilder()
        kb.button(text="üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã", callback_data=f"r=t;a=slot_students;s={slot_id}")
        kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"r=t;a=slot_edit;s={slot_id}")
        
        if status_info["status"] == "closed":
            kb.button(text="üü¢ –û—Ç–∫—Ä—ã—Ç—å", callback_data=f"r=t;a=slot_open;s={slot_id}")
        else:
            kb.button(text="üö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"r=t;a=slot_close;s={slot_id}")
        
        kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"r=t;a=slot_delete;s={slot_id}")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"r=t;a=slot_list;d={date.replace('-', '')}")
        
        kb.adjust(2, 2, 1, 1)
        
        await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        
    except Exception as e:
        log.error(f"Error in slot_card: {e}")
        await cb.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ================================================================================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ö–Ω–æ–ø–∫–∞ "–°—Ç—É–¥–µ–Ω—Ç—ã" - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
# ================================================================================================

@router.callback_query(F.data.startswith("r=t;a=slot_students;s="))
async def slot_students_handler(
    cb: CallbackQuery,
    bookings: BookingService,
    users: UsersService
):
    """–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    await cb.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º slot_id
    try:
        data = parse_callback(cb.data)
        slot_id = data.get("s", "")
        
        log.info(f"slot_students_handler: callback_data={cb.data}, slot_id={slot_id}")
        
        if not slot_id:
            log.error(f"slot_students_handler: slot_id not found in callback_data={cb.data}")
            await cb.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–ª–æ—Ç–∞")
            return
            
    except Exception as e:
        log.error(f"Error parsing slot_students callback: {cb.data}, error: {e}")
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        bookings_df = bookings.table.read()
        
        if bookings_df.empty:
            text = "üë®‚Äçüéì <b>–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã</b>\n\nüì≠ –ù–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω."
        else:
            slot_bookings = bookings_df[bookings_df["slot_id"] == slot_id]
            
            active_bookings = slot_bookings[
                slot_bookings["status"].str.lower().isin(["active", "confirmed"])
            ] if "status" in slot_bookings.columns else slot_bookings
            
            if active_bookings.empty:
                text = "üë®‚Äçüéì <b>–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã</b>\n\nüì≠ –ù–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω."
            else:
                lines = ["üë®‚Äçüéì <b>–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã:</b>\n"]
                
                for i, (_, booking_row) in enumerate(active_bookings.iterrows(), 1):
                    tg_id = booking_row.get("student_tg_id")
                    if tg_id:
                        try:
                            student_user = users.get_by_tg(int(tg_id))
                            if student_user:
                                first_name = student_user.get('first_name', '')
                                last_name = student_user.get('last_name', '')
                                student_name = f"{first_name} {last_name}".strip()
                                if not student_name:
                                    student_name = f"ID: {student_user.get('id', tg_id)}"
                            else:
                                student_name = f"TG: {tg_id}"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
                            created_at = booking_row.get("created_at", "")
                            if created_at:
                                try:
                                    dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                                    date_str = dt.strftime("%d.%m %H:%M")
                                    lines.append(f"{i}. <b>{student_name}</b>\n   üìù –ó–∞–ø–∏—Å–∞–ª—Å—è: {date_str}")
                                except:
                                    lines.append(f"{i}. <b>{student_name}</b>")
                            else:
                                lines.append(f"{i}. <b>{student_name}</b>")
                        except Exception as e:
                            log.error(f"Error processing student {tg_id}: {e}")
                            lines.append(f"{i}. ID: {tg_id}")
                
                text = "\n".join(lines)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ª–æ—Ç—É", callback_data=f"r=t;a=slot_card;s={slot_id}")
        
        await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        
    except Exception as e:
        log.error(f"Error listing students for slot {slot_id}: {e}", exc_info=True)
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")

# ================================================================================================
# üìö –ú–ï–¢–û–î–ò–ß–ï–°–ö–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–´
# ================================================================================================

@router.callback_query(F.data == "r=t;a=materials_main")
async def materials_main_handler(cb: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    await cb.answer()
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∫—É—Ä—Å–∞", callback_data="r=t;a=syllabus_view")
    kb.button(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –Ω–µ–¥–µ–ª–µ", callback_data="r=t;a=material_upload_pick_week")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=back_to_main")
    kb.adjust(1)
    
    text = "üìö <b>–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")

@router.callback_query(F.data == "r=t;a=syllabus_view")
async def syllabus_view_handler(cb: CallbackQuery, weeks: WeeksService):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–º –∫—É—Ä—Å–∞"""
    await cb.answer()
    
    try:
        weeks_df = weeks.list_all_weeks()
        if weeks_df.empty:
            text = "üìñ <b>–¢–µ–º—ã –∫—É—Ä—Å–∞</b>\n\n‚ùå –¢–µ–º—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        else:
            lines = ["üìñ <b>–í—Å–µ —Ç–µ–º—ã –∫—É—Ä—Å–∞:</b>\n"]
            for _, row in weeks_df.iterrows():
                status = row["status_emoji"]
                deadline_str = row["deadline_date"].strftime('%d.%m.%Y')
                lines.append(f"<b>{row['week']}. {row['title']}</b>")
                lines.append(f"   {status} –î–µ–¥–ª–∞–π–Ω: {deadline_str}\n")
            text = "\n".join(lines)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=materials_main")
        
        await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    except Exception as e:
        log.error(f"Error in syllabus_view: {e}")
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º –∫—É—Ä—Å–∞")

# ================================================================================================
# üë®‚Äçüéì –°–î–ê–ß–ò –°–¢–£–î–ï–ù–¢–û–í
# ================================================================================================

@router.callback_query(F.data == "r=t;a=submissions_main")
async def submissions_main_handler(cb: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–¥–∞—á —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    await cb.answer()
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÜ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–¥–∞—á–∏", callback_data="r=t;a=sub_act_dates")
    kb.button(text="üìú –ü—Ä–æ—à–µ–¥—à–∏–µ —Å–¥–∞—á–∏", callback_data="r=t;a=sub_past_pick_mode")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=back_to_main")
    kb.adjust(1)
    
    text = "üë®‚Äçüéì <b>–°–¥–∞—á–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</b>\n\nüöß –§—É–Ω–∫—Ü–∏–∏ —á–∞—Å—Ç–∏—á–Ω–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")

@router.callback_query(F.data == "r=t;a=sub_act_dates")
async def sub_act_dates_handler(cb: CallbackQuery):
    """–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–¥–∞—á–∏"""
    await cb.answer()
    
    text = "üìÜ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–¥–∞—á–∏</b>\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:\n‚Ä¢ üìÇ –°–∫–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n‚Ä¢ ‚úÖ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É"
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=submissions_main")
    
    await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")

@router.callback_query(F.data == "r=t;a=sub_past_pick_mode")
async def sub_past_pick_mode_handler(cb: CallbackQuery):
    """–ü—Ä–æ—à–µ–¥—à–∏–µ —Å–¥–∞—á–∏ - —Ä–µ–∂–∏–º—ã –ø–æ–∏—Å–∫–∞"""
    await cb.answer()
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üîé –ü–æ —Å–ª–æ—Ç–∞–º", callback_data="r=t;a=sub_past_by_slot")
    kb.button(text="üìñ –ü–æ –Ω–µ–¥–µ–ª—è–º", callback_data="r=t;a=sub_past_by_week")
    kb.button(text="üë• –ü–æ –≥—Ä—É–ø–ø–µ", callback_data="r=t;a=sub_past_by_group")
    kb.button(text="üßë‚Äçüéì –ü–æ —Å—Ç—É–¥–µ–Ω—Ç—É", callback_data="r=t;a=sub_past_by_student")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=submissions_main")
    
    kb.adjust(2, 2, 1)
    
    text = "üìú <b>–ü—Ä–æ—à–µ–¥—à–∏–µ —Å–¥–∞—á–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
    await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")

@router.callback_query(F.data == "r=t;a=sub_past_by_slot")
@router.callback_query(F.data == "r=t;a=sub_past_by_week")
@router.callback_query(F.data == "r=t;a=sub_past_by_group")  
@router.callback_query(F.data == "r=t;a=sub_past_by_student")
async def sub_past_by_handler(cb: CallbackQuery):
    """–†–µ–∂–∏–º—ã –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–¥–∞—á"""
    await cb.answer()
    
    data = parse_callback(cb.data)
    action = data.get("a", "")
    
    mode_names = {
        "sub_past_by_slot": "üîé –ü–æ —Å–ª–æ—Ç–∞–º",
        "sub_past_by_week": "üìñ –ü–æ –Ω–µ–¥–µ–ª—è–º",
        "sub_past_by_group": "üë• –ü–æ –≥—Ä—É–ø–ø–µ", 
        "sub_past_by_student": "üßë‚Äçüéì –ü–æ —Å—Ç—É–¥–µ–Ω—Ç—É"
    }
    
    mode_name = mode_names.get(action, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
    
    text = f"<b>{mode_name}</b>\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–¥–∞—á —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:\n‚Ä¢ üìÇ –°–∫–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n‚Ä¢ ‚úÖ –ü–æ—Å—Ç–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É"
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="r=t;a=sub_past_pick_mode")
    
    await cb.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")

# ================================================================================================
# TODO: –î–û–†–ê–ë–û–¢–ö–ê –§–£–ù–ö–¶–ò–ô
# ================================================================================================

"""
TODO –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:

1. –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò:
   - sched_create_start: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å /schedule –º–∞—Å—Ç–µ—Ä–æ–º
   - slot_action_handler: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å /myslots_manage –ª–æ–≥–∏–∫–æ–π
   - –í—Å–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

2. –°–ò–°–¢–ï–ú–ê –°–¢–ê–¢–£–°–û–í –ò –§–ò–õ–¨–¢–†–û–í:
   - –§–∏–ª—å—Ç—Ä—ã —Å–ª–æ—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º: üü¢, üü°, üî¥, ‚ö™, ‚ö´ + ¬´–°–±—Ä–æ—Å¬ª
   - –ü–∞–≥–∏–Ω–∞—Ü–∏—è: ‚Äπ, ‚Ä∫ + ¬´–°—Ç—Ä. X/Y¬ª –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
   - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–ª–æ—Ç–æ–≤

3. –í–´–°–¢–ê–í–õ–ï–ù–ò–ï –û–¶–ï–ù–û–ö:
   - –≠–∫—Ä–∞–Ω—ã sub_action_download –∏ sub_action_grade
   - –ö–Ω–æ–ø–∫–∏: 5, 4, 3, 2, 1, –û—Ç–º–µ–Ω–∞
   - Toast: "‚úÖ –û—Ü–µ–Ω–∫–∞ 5 –¥–ª—è –ò–≤–∞–Ω–æ–≤ –ò.–ò. —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"

4. –ó–ê–ì–†–£–ó–ö–ê –ú–ê–¢–ï–†–ò–ê–õ–û–í:
   - material_upload_pick_week —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–µ–¥–µ–ª—è–º–∏
   - material_upload_wait_file FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   - "‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è Wxx –∑–∞–≥—Ä—É–∂–µ–Ω—ã"

5. –î–ï–¢–ê–õ–¨–ù–´–ï –≠–ö–†–ê–ù–´ –°–î–ê–ß:
   - sub_act_slots -> sub_act_students -> sub_action_[download|grade]
   - –ü–æ–ª–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–∂–∏–º–∞–º –ø–æ–∏—Å–∫–∞
   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å submission –∏ grade —Å–µ—Ä–≤–∏—Å–∞–º–∏

6. –õ–û–ì–ò–†–û–í–ê–ù–ò–ï:
   - TEACHER_SCHED_CREATE {teacher_id} {from_date} {to_date} {len} {cap} -> {n_slots}
   - TEACHER_SLOT_ACTION {teacher_id} {slot_id} {action}  
   - TEACHER_MATERIAL_UPLOAD {teacher_id} {week} {file_id}
   - TEACHER_GRADE_SET {teacher_id} {student_id} {week|slot_id} {grade}

7. –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ì–û–¢–û–í–ù–û–°–¢–ò:
   - schedule_handler.py (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º)
   - slots_handler.py (–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ª–æ—Ç–∞–º–∏)
   - submissions_handler.py (—Ä–∞–±–æ—Ç–∞ —Å–æ —Å–¥–∞—á–∞–º–∏)
   - materials_handler.py (–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ù–ï–°–ï–ù–´:
‚úÖ 1. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ç–µ–º –∫—É—Ä—Å–∞ - —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ /weeks_list
‚úÖ 2. –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞  
‚úÖ 3. –°–¥–∞—á–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ - –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
‚úÖ 4. –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞
‚úÖ 5. –ö–Ω–æ–ø–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç—ã –≤ —Å–ª–æ—Ç–µ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ callback_data

–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "r=t;a=action;..."
"""