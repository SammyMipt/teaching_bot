# –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ app/bot/routers/teachers/ta_register.py

from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.services.users_service import UsersService
from app.services.roster_ta_service import RosterTaService
from app.services.audit_service import AuditService

router = Router(name="teachers_ta_register")

class TaRegFSM(StatesGroup):
    waiting_invite_code = State()
    waiting_ta_selection = State()
    waiting_confirmation = State()

@router.message(F.text == "/register_ta")
async def register_ta_start(message: Message, actor_tg_id: int, users: UsersService, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    user = users.get_by_tg(actor_tg_id)
    if user and user.get("role") in ("ta", "owner"):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        return
    
    await state.clear()
    await state.set_state(TaRegFSM.waiting_invite_code)
    await message.answer(
        "üîê <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã: /cancel",
        parse_mode="HTML"
    )

@router.message(TaRegFSM.waiting_invite_code, F.text)
async def ta_check_invite_code(message: Message, state: FSMContext, roster_ta: RosterTaService, 
                               audit: AuditService, ta_invite_code: str | None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    code = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if code.lower() in ["/cancel", "cancel"]:
        await state.clear()
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    if not ta_invite_code or code != ta_invite_code:
        audit.log(actor_tg_id=message.from_user.id, action="ta_register_bad_code",
                  target=str(message.from_user.id), meta={"code": code})
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫—É—Ä—Å–∞.")
        return
    
    # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ä–æ—Å—Ç–µ—Ä–∞
    tas = roster_ta.get_all_tas()
    if not tas:
        await message.answer("‚ùå –†–æ—Å—Ç–µ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫—É—Ä—Å–∞.")
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
    kb = InlineKeyboardBuilder()
    for ta in tas:
        ta_id = ta["ta_id"]
        full_name = ta["full_name"]
        kb.button(text=f"{full_name} ({ta_id})", callback_data=f"ta_reg:select:{ta_id}")
    
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="ta_reg:cancel")
    kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    
    await state.set_state(TaRegFSM.waiting_ta_selection)
    await message.answer(
        "‚úÖ <b>–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(TaRegFSM.waiting_ta_selection, F.data.startswith("ta_reg:select:"))
async def ta_select_from_roster(cb: CallbackQuery, state: FSMContext, roster_ta: RosterTaService):
    """–í—ã–±–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–æ—Å—Ç–µ—Ä–∞"""
    ta_id = cb.data.split(":")[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    ta_data = roster_ta.get_ta_by_id(ta_id)
    if not ta_data:
        await cb.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–æ—Å—Ç–µ—Ä–µ", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_ta=ta_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    full_name = ta_data["full_name"]
    ta_id = ta_data["ta_id"]
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="ta_reg:confirm")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="ta_reg:back")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="ta_reg:cancel")
    
    await state.set_state(TaRegFSM.waiting_confirmation)
    await cb.message.edit_text(
        f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
        f"<b>–í—ã–±—Ä–∞–Ω:</b> {full_name}\n"
        f"<b>ID:</b> {ta_id}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await cb.answer()

@router.callback_query(TaRegFSM.waiting_ta_selection, F.data == "ta_reg:back")
@router.callback_query(TaRegFSM.waiting_confirmation, F.data == "ta_reg:back")
async def ta_back_to_list(cb: CallbackQuery, state: FSMContext, roster_ta: RosterTaService):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    tas = roster_ta.get_all_tas()
    if not tas:
        await cb.message.edit_text("‚ùå –†–æ—Å—Ç–µ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        await state.clear()
        await cb.answer()
        return
    
    kb = InlineKeyboardBuilder()
    for ta in tas:
        ta_id = ta["ta_id"]
        full_name = ta["full_name"]
        kb.button(text=f"{full_name} ({ta_id})", callback_data=f"ta_reg:select:{ta_id}")
    
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="ta_reg:cancel")
    kb.adjust(1)
    
    await state.set_state(TaRegFSM.waiting_ta_selection)
    await cb.message.edit_text(
        "‚úÖ <b>–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await cb.answer()

@router.callback_query(TaRegFSM.waiting_confirmation, F.data == "ta_reg:confirm")
async def ta_confirm_registration(cb: CallbackQuery, actor_tg_id: int, state: FSMContext, 
                                  users: UsersService, audit: AuditService):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    selected_ta = data.get("selected_ta")
    
    if not selected_ta:
        await cb.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    ta_id = selected_ta["ta_id"]
    first_name = selected_ta.get("first_name_ru", "")
    last_name = selected_ta.get("last_name_ru", "")
    full_name = selected_ta["full_name"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —ç—Ç–æ—Ç ta_id –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    existing_user = users.get_by_id(ta_id)
    if existing_user and str(existing_user.get("tg_id")) != str(actor_tg_id):
        await cb.message.edit_text(
            f"‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {full_name} ({ta_id}) —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫—É—Ä—Å–∞."
        )
        await state.clear()
        await cb.answer()
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    try:
        users.upsert_basic(
            tg_id=actor_tg_id,
            role="ta",
            first_name=first_name,
            last_name=last_name,
            username=cb.from_user.username or "",
            email="",
            id=ta_id
        )
        
        audit.log(
            actor_tg_id=actor_tg_id, 
            action="ta_register_success",
            target=ta_id, 
            meta=selected_ta
        )
        
        await cb.message.edit_text(
            f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å:</b> {full_name}\n"
            f"<b>–í–∞—à–∞ —Ä–æ–ª—å:</b> –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n"
            f"<b>ID:</b> {ta_id}\n\n"
            f"üìÖ –°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: /schedule\n"
            f"üîç –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ª–æ—Ç—ã: /myslots",
            parse_mode="HTML"
        )
        await state.clear()
        await cb.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! üéâ")
        
    except Exception as e:
        audit.log(
            actor_tg_id=actor_tg_id,
            action="ta_register_error", 
            target=ta_id,
            meta={"error": str(e)}
        )
        await cb.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫—É—Ä—Å–∞."
        )
        await state.clear()
        await cb.answer()

@router.callback_query(TaRegFSM.waiting_ta_selection, F.data == "ta_reg:cancel")
@router.callback_query(TaRegFSM.waiting_confirmation, F.data == "ta_reg:cancel")
async def ta_cancel_registration(cb: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await cb.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await cb.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ—Ç–º–µ–Ω—ã - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
@router.message(F.text.in_(["/cancel", "cancel"]))
async def ta_cancel_text(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"""
    current_state = await state.get_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ TA
    if current_state and "TaRegFSM" in current_state:
        await state.clear()
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ TA —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(F.text == "/debug_ta_state")
async def debug_ta_state(message: Message, state: FSMContext):
    """–û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è TA —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    data = await state.get_data()
    
    await message.answer(
        f"üîç <b>–û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è TA FSM:</b>\n\n"
        f"‚Ä¢ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state or 'None'}\n"
        f"‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}\n"
        f"‚Ä¢ User ID: {message.from_user.id}",
        parse_mode="HTML"
    )

@router.message(F.text == "/debug_roster_ta")
async def debug_roster_ta(message: Message, roster_ta: RosterTaService):
    """–û—Ç–ª–∞–¥–∫–∞ —Ä–æ—Å—Ç–µ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    try:
        tas = roster_ta.get_all_tas()
        if not tas:
            await message.answer("‚ùå –†–æ—Å—Ç–µ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return
        
        lines = ["üîç <b>–†–æ—Å—Ç–µ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:</b>\n"]
        for ta in tas[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
            lines.append(f"‚Ä¢ {ta['full_name']} ({ta['ta_id']})")
        
        if len(tas) > 5:
            lines.append(f"... –∏ –µ—â–µ {len(tas) - 5}")
        
        await message.answer("\n".join(lines), parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")