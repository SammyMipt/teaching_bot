from aiogram import Router, F
from aiogram.types import Message
from app.services.slot_service import SlotService
from app.services.booking_service import BookingService
from app.services.users_service import UsersService

router = Router(name="students_slots")

@router.message(F.text == "/slots")
async def free_slots(message: Message, slots: SlotService, bookings: BookingService, users: UsersService):
    df = slots.list_free_with_bookings(bookings)
    if df.empty:
        await message.answer("–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.")
        return

    def short_name_by_tg(tg_id: int) -> str:
        u = users.get_by_tg(int(tg_id)) or {}
        ln = (u.get("last_name") or "").strip()
        fn = (u.get("first_name") or "").strip()
        if ln or fn:
            init = (fn[:1] + ".") if fn else ""
            return f"{ln} {init}".strip()
        username = u.get("username")
        return f"@{username}" if username else str(tg_id)

    lines = ["–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:"]
    for _, r in df.iterrows():
        cap = int(r.get("capacity", 1))
        booked = int(r.get("booked_count", 0))
        left = cap - booked

        # —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if left == cap:
            mark = "üü¢"
        elif left == 0:
            mark = "üî¥"
        else:
            mark = "üü°"

        # —Ç–∏–ø –∏ ¬´–ª–æ–∫–∞—Ü–∏—è¬ª
        mode = r.get("mode", "online")
        link = r.get("meeting_link") or ""
        location = r.get("location") or ("–û–Ω–ª–∞–π–Ω" if mode == "online" else "–ê—É–¥–∏—Ç–æ—Ä–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        mode_label = "–û–Ω–ª–∞–π–Ω" if mode == "online" else "–û—á–Ω–æ"

        # –∫—Ç–æ –∑–∞–ø–∏—Å–∞–Ω
        booked_line = ""
        try:
            bdf = bookings.list_for_slot(r["slot_id"])
        except AttributeError:
            # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ ‚Äî –æ–±—Ä–∞—Ç–∏–º—Å—è –∫ ¬´—Å—ã—Ä–æ–π¬ª —Ç–∞–±–ª–∏—Ü–µ
            bdf = bookings.table.find(slot_id=r["slot_id"])
        if not bdf.empty:
            names = [short_name_by_tg(tg) for tg in bdf["student_tg_id"].tolist()]
            booked_line = "\n  –ó–∞–ø–∏—Å–∞–Ω—ã: " + ", ".join(names)

        # —Å—Å—ã–ª–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ
        link_part = f" ‚Ä¢ üîó {link}" if (mode == "online" and link) else ""

        # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–æ—Ç–∞
        lines.append(
            f"{mark} [{r['slot_id']}] {r['date']} {r['time_from']}-{r['time_to']} ‚Ä¢ {mode_label} ‚Ä¢ {location}{link_part}\n"
            f"  –º–µ—Å—Ç: {cap}, –∑–∞–Ω—è—Ç–æ: {booked}, —Å–≤–æ–±–æ–¥–Ω–æ: {left}"
            f"{booked_line}"
        )

    await message.answer("\n".join(lines))

@router.message(F.text.startswith("/book"))
async def book_cmd(message: Message, slots: SlotService, bookings: BookingService):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /book [slot_id]")
        return
    slot_id = parts[1].strip()

    df = slots.table.find(slot_id=slot_id)
    if df.empty:
        await message.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    capacity = int(df.iloc[0].get("capacity", 1))
    try:
        bdf = bookings.list_for_slot(slot_id)
        current_bookings = len(bdf)
    except AttributeError:
        bdf = bookings.table.find(slot_id=slot_id)
        current_bookings = len(bdf)

    if current_bookings >= capacity:
        await message.answer("–í —Å–ª–æ—Ç–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    booking_row = {
        "slot_id": slot_id,
        "student_tg_id": message.from_user.id,
        "status": "active",
        "created_at": "2025-08-21T00:00:00Z"  # –∑–∞–≥–ª—É—à–∫–∞
    }
    bookings.table.append_row(booking_row)
    await message.answer(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot_id}!")