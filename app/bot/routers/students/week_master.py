from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.services.weeks_service import WeeksService
from app.services.assignments_service import AssignmentsService
from app.services.users_service import UsersService
from app.services.slot_service import SlotService
from app.services.booking_service import BookingService
from app.services.grade_service import GradeService

router = Router(name="students_week_master")

@router.message(F.text == "/week")
async def week_master_start(
    message: Message, 
    actor_tg_id: int,
    weeks: WeeksService,
    users: UsersService
):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ–¥–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–¥–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
    user = users.get_by_tg(actor_tg_id)
    if not user or user.get("role") != "student":
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /register")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–µ–ª—å
    current_weeks = weeks.get_current_weeks()
    if not current_weeks:
        await message.answer("üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–µ–ª—è—Ö –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ–¥–µ–ª—è–º–∏
    kb = InlineKeyboardBuilder()
    
    for week_dict in current_weeks:
        button_text = weeks.format_week_button_text(week_dict)
        callback_data = f"week:select:{week_dict['week']}"
        kb.button(text=button_text, callback_data=callback_data)
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    kb.adjust(2)
    
    text = "üìö **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:**\n\n" \
           "üü¢ ‚Äî –≤ —Å—Ä–æ–∫  \n" \
           "üî¥ ‚Äî –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
    
    await message.answer(text, reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith("week:select:"))
async def week_select_menu(
    cb: CallbackQuery,
    actor_tg_id: int,
    weeks: WeeksService,
    assignments: AssignmentsService,
    users: UsersService
):
    """
    –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
    """
    try:
        week_number = int(cb.data.split(":")[-1])
    except ValueError:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–∏
    week_info = weeks.get_week(week_number)
    if not week_info:
        await cb.answer("–ù–µ–¥–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ TA –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
    user = users.get_by_tg(actor_tg_id)
    student_code = user.get("id") if user else None
    
    ta_code = None
    if student_code:
        ta_code = assignments.get_assignment_for_student_code(student_code, week_number)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    kb = InlineKeyboardBuilder()
    
    # 1. –û–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–¥–ª–∞–π–Ω
    kb.button(
        text="üìã –û–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–¥–ª–∞–π–Ω", 
        callback_data=f"week:info:{week_number}"
    )
    
    # 2. –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    kb.button(
        text="üì• –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã", 
        callback_data=f"week:download:{week_number}"
    )
    
    # 3. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)  
    kb.button(
        text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è", 
        callback_data=f"week:upload:{week_number}"
    )
    
    # 4. –ó–∞–ø–∏—Å—å –Ω–∞ —Å–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π TA)
    if ta_code:
        kb.button(
            text="üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Å–¥–∞—á—É", 
            callback_data=f"week:booking:{week_number}:{ta_code}"
        )
    
    # 5. –£–∑–Ω–∞—Ç—å –æ—Ü–µ–Ω–∫—É
    kb.button(
        text="üéØ –£–∑–Ω–∞—Ç—å –æ—Ü–µ–Ω–∫—É", 
        callback_data=f"week:grade:{week_number}"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –Ω–µ–¥–µ–ª—å", callback_data="week:back")
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    kb.adjust(1)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–¥–µ–ª–∏
    status_text = "üî¥ –ü–†–û–°–†–û–ß–ï–ù–û" if week_info["is_overdue"] else "üü¢ –í –°–†–û–ö"
    text = f"**–ù–µ–¥–µ–ª—è {week_number}: {week_info['title']}**\n\n" \
           f"üìÖ –î–µ–¥–ª–∞–π–Ω: {week_info['deadline_str']} ({status_text})\n\n" \
           f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await cb.message.edit_text(text, reply_markup=kb.as_markup())
    await cb.answer()


@router.callback_query(F.data.startswith("week:info:"))
async def week_show_info(cb: CallbackQuery, weeks: WeeksService, assignments: AssignmentsService, users: UsersService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ–¥–µ–ª–∏"""
    try:
        week_number = int(cb.data.split(":")[-1])
    except ValueError:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    week_info = weeks.get_week(week_number)
    if not week_info:
        await cb.answer("–ù–µ–¥–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º TA
    user = users.get_by_tg(cb.from_user.id)  # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º real tg_id –¥–ª—è –ø–æ–∏—Å–∫–∞
    student_code = user.get("id") if user else None
    
    ta_info = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    if student_code:
        ta_code = assignments.get_assignment_for_student_code(student_code, week_number)
        if ta_code:
            ta_user = users.get_by_id(ta_code)
            if ta_user:
                ta_name = f"{ta_user.get('last_name', '')} {ta_user.get('first_name', '')}".strip()
                ta_info = f"{ta_name} ({ta_code})"
            else:
                ta_info = ta_code
    
    status_text = "üî¥ –ü–†–û–°–†–û–ß–ï–ù–û" if week_info["is_overdue"] else "üü¢ –í –°–†–û–ö"
    
    text = f"üìã **–ù–µ–¥–µ–ª—è {week_number}: {week_info['title']}**\n\n" \
           f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{week_info['description']}\n\n" \
           f"üìÖ **–î–µ–¥–ª–∞–π–Ω:** {week_info['deadline_str']} ({status_text})\n\n" \
           f"üë®‚Äçüè´ **–ü—Ä–∏–Ω–∏–º–∞–µ—Ç:** {ta_info}"
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"week:select:{week_number}")
    
    await cb.message.edit_text(text, reply_markup=kb.as_markup())
    await cb.answer()


@router.callback_query(F.data.startswith("week:download:"))
async def week_download_tasks(cb: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
    week_number = cb.data.split(":")[-1]
    
    text = f"üì• **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –Ω–µ–¥–µ–ª–∏ {week_number}**\n\n" \
           f"üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n" \
           f"–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ –∫—É—Ä—Å–∞:\n" \
           f"üìñ [–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞](https://example.com/course)"
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"week:select:{week_number}")
    
    await cb.message.edit_text(text, reply_markup=kb.as_markup())
    await cb.answer()


@router.callback_query(F.data.startswith("week:upload:"))
async def week_upload_solutions(cb: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—à–µ–Ω–∏–π"""
    week_number = cb.data.split(":")[-1]
    
    text = f"üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –Ω–µ–¥–µ–ª–∏ {week_number}**\n\n" \
           f"üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n" \
           f"–ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã."
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"week:select:{week_number}")
    
    await cb.message.edit_text(text, reply_markup=kb.as_markup())
    await cb.answer()


@router.callback_query(F.data.startswith("week:booking:"))
async def week_booking_redirect(cb: CallbackQuery, slots: SlotService, bookings: BookingService, users: UsersService):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É TA"""
    try:
        parts = cb.data.split(":")
        week_number = int(parts[2])
        ta_code = parts[3]
    except (ValueError, IndexError):
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID TA –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤
    ta_id = users.get_ta_id_by_code(ta_code)
    if not ta_id:
        await cb.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã TA
    slots_df = slots.table.read()
    ta_slots = slots_df[slots_df["ta_id"] == ta_id] if not slots_df.empty else pd.DataFrame()
    
    if ta_slots.empty:
        text = f"üìÖ **–ó–∞–ø–∏—Å—å –Ω–∞ —Å–¥–∞—á—É –Ω–µ–¥–µ–ª–∏ {week_number}**\n\n" \
               f"üö´ –£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {ta_code} –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.\n\n" \
               f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
    else:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_count = 0
        for _, slot_row in ta_slots.iterrows():
            slot_dict = slot_row.to_dict()
            current_bookings = 0
            
            # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                slot_bookings = bookings.list_for_slot(slot_dict["slot_id"])
                if not slot_bookings.empty:
                    active_bookings = slot_bookings
                    if "status" in slot_bookings.columns:
                        active_bookings = slot_bookings[slot_bookings["status"].str.lower().isin(["active", "confirmed"])]
                    current_bookings = len(active_bookings)
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            computed_status = slots.get_computed_status(slot_dict, current_bookings)
            if computed_status in ("free_full", "free_partial"):
                available_count += 1
        
        if available_count > 0:
            text = f"üìÖ **–ó–∞–ø–∏—Å—å –Ω–∞ —Å–¥–∞—á—É –Ω–µ–¥–µ–ª–∏ {week_number}**\n\n" \
                   f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {ta_code}\n" \
                   f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {available_count}\n\n" \
                   f"–î–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ä—É—é –∫–æ–º–∞–Ω–¥—É:\n" \
                   f"`/week {week_number}`\n\n" \
                   f"*(–í —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å)*"
        else:
            text = f"üìÖ **–ó–∞–ø–∏—Å—å –Ω–∞ —Å–¥–∞—á—É –Ω–µ–¥–µ–ª–∏ {week_number}**\n\n" \
                   f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {ta_code}\n" \
                   f"üî¥ –í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã\n\n" \
                   f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤."
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"week:select:{week_number}")
    
    await cb.message.edit_text(text, reply_markup=kb.as_markup())
    await cb.answer()


@router.callback_query(F.data.startswith("week:grade:"))
async def week_show_grade(cb: CallbackQuery, weeks: WeeksService, grades: GradeService, users: UsersService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        week_number = int(cb.data.split(":")[-1])
    except ValueError:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
    user = users.get_by_tg(cb.from_user.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º real tg_id
    student_code = user.get("id") if user else None
    
    if not student_code:
        await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à student_code", show_alert=True)
        return
    
    # –ò—â–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ week (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ task_id = week –∏–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑—å)
    # –ü–æ–∫–∞ —Å–¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å GradeService
    
    week_info = weeks.get_week(week_number)
    week_title = week_info["title"] if week_info else f"–ù–µ–¥–µ–ª—è {week_number}"
    
    text = f"üéØ **–û—Ü–µ–Ω–∫–∞ –∑–∞ {week_title}**\n\n" \
           f"üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n" \
           f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/grades`"
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"week:select:{week_number}")
    
    await cb.message.edit_text(text, reply_markup=kb.as_markup())
    await cb.answer()


@router.callback_query(F.data == "week:back")
async def week_back_to_list(cb: CallbackQuery, actor_tg_id: int, weeks: WeeksService, users: UsersService):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –Ω–µ–¥–µ–ª—å"""
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ week_master_start
    user = users.get_by_tg(actor_tg_id)
    if not user or user.get("role") != "student":
        await cb.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º", show_alert=True)
        return
    
    current_weeks = weeks.get_current_weeks()
    if not current_weeks:
        await cb.message.edit_text("üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–µ–ª—è—Ö –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        await cb.answer()
        return
    
    kb = InlineKeyboardBuilder()
    
    for week_dict in current_weeks:
        button_text = weeks.format_week_button_text(week_dict)
        callback_data = f"week:select:{week_dict['week']}"
        kb.button(text=button_text, callback_data=callback_data)
    
    kb.adjust(2)
    
    text = "üìö **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:**\n\n" \
           "üü¢ ‚Äî –≤ —Å—Ä–æ–∫  \n" \
           "üî¥ ‚Äî –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
    
    await cb.message.edit_text(text, reply_markup=kb.as_markup())
    await cb.answer()