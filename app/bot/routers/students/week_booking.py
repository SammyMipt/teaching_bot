from __future__ import annotations
import pandas as pd
from datetime import datetime, timezone
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.services.assignments_service import AssignmentsService
from app.services.users_service import UsersService
from app.services.slot_service import SlotService
from app.services.booking_service import BookingService

router = Router(name="students_week_booking")

def _s(v) -> str:
    return str(v or "").strip()

def _find_col(df: pd.DataFrame, *candidates: str) -> str | None:
    for col in candidates:
        if col in df.columns:
            return col
    return None

def _ta_present(users: UsersService, ta_code: str) -> tuple[str, str | None]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (label, ta_id). –ï—Å–ª–∏ TA –Ω–µ –Ω–∞–π–¥–µ–Ω, ta_id=None."""
    if not ta_code:
        return "‚Äî", None
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ta_code
    ta_id = users.get_ta_id_by_code(ta_code)
    if ta_id:
        row = users.get_by_id(ta_id)
        if row:
            fn = _s(row.get("first_name"))
            ln = _s(row.get("last_name"))
            name = f"{ln} {fn}".strip() or f"TA-{ta_code}"
            return name, ta_id
    
    return f"TA-{ta_code}", None

def _filter_slots_for_ta(slots_df: pd.DataFrame, bookings_df: pd.DataFrame, ta_id: str, slot_service: SlotService) -> pd.DataFrame | None:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª–æ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ TA, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    if slots_df.empty:
        return None

    # –ù–∞–π–¥–µ–º –∫–æ–ª–æ–Ω–∫—É TA
    ta_col = _find_col(slots_df, "ta_id", "teacher_id", "instructor_id")
    if not ta_col:
        return None

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ TA
    ta_slots = slots_df[slots_df[ta_col].astype(str) == str(ta_id)].copy()
    if ta_slots.empty:
        return ta_slots

    # –û–±–æ–≥–∞—â–∞–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    enriched_slots = []
    for _, row in ta_slots.iterrows():
        slot_dict = row.to_dict()
        slot_id = slot_dict.get("slot_id")
        
        # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        current_bookings = 0
        if not bookings_df.empty and slot_id:
            slot_bookings = bookings_df[bookings_df.get("slot_id", pd.Series()).astype(str) == str(slot_id)]
            if not slot_bookings.empty:
                status_col = _find_col(slot_bookings, "status", "state")
                if status_col:
                    active_bookings = slot_bookings[
                        slot_bookings[status_col].str.lower().isin(["active", "confirmed"])
                    ]
                    current_bookings = len(active_bookings)
                else:
                    current_bookings = len(slot_bookings)

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        computed_status = slot_service.get_computed_status(slot_dict, current_bookings)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        if computed_status in ("free_full", "free_partial"):
            slot_dict["__computed_status"] = computed_status
            slot_dict["__current_bookings"] = current_bookings
            slot_dict["__slot_id"] = slot_id
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            try:
                date_str = _s(slot_dict.get("date", ""))
                time_from_str = _s(slot_dict.get("time_from", ""))
                time_to_str = _s(slot_dict.get("time_to", ""))
                
                if date_str and time_from_str and time_to_str:
                    y, m, d = map(int, date_str.split("-"))
                    h_start, min_start = map(int, time_from_str.split(":"))
                    h_end, min_end = map(int, time_to_str.split(":"))
                    
                    start_dt = datetime(y, m, d, h_start, min_start, tzinfo=timezone.utc)
                    end_dt = datetime(y, m, d, h_end, min_end, tzinfo=timezone.utc)
                    
                    slot_dict["__start_ts"] = start_dt
                    slot_dict["__end_ts"] = end_dt
                    slot_dict["__mode"] = _s(slot_dict.get("mode", "online"))
                    
                    location = _s(slot_dict.get("location", ""))
                    meeting_link = _s(slot_dict.get("meeting_link", ""))
                    
                    if slot_dict["__mode"] == "online" and meeting_link:
                        slot_dict["__place"] = meeting_link
                    elif location:
                        slot_dict["__place"] = location
                    else:
                        slot_dict["__place"] = "–ê—É–¥–∏—Ç–æ—Ä–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
                    
                    capacity = int(slot_dict.get("capacity", 1))
                    slot_dict["__remains"] = capacity - current_bookings
                    
                    enriched_slots.append(slot_dict)
            except (ValueError, AttributeError):
                continue

    if not enriched_slots:
        return pd.DataFrame()
    
    return pd.DataFrame(enriched_slots)

def _slot_brief_row(start_ts, end_ts, mode: str, place: str, remains: int) -> str:
    """–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏."""
    try:
        if isinstance(start_ts, datetime) and isinstance(end_ts, datetime):
            time_str = f"{start_ts.strftime('%H:%M')}-{end_ts.strftime('%H:%M')}"
            date_str = start_ts.strftime('%d.%m')
        else:
            time_str = f"{start_ts}-{end_ts}"
            date_str = "???"
        
        mode_emoji = "üíª" if mode == "online" else "üè´"
        place_short = place[:15] + "..." if len(place) > 15 else place
        
        return f"{date_str} {time_str} {mode_emoji} {place_short} (–º–µ—Å—Ç: {remains})"
    except Exception:
        return f"{start_ts}-{end_ts} {mode} {place} (–º–µ—Å—Ç: {remains})"

@router.message(F.text.startswith("/week"))
async def week_booking(
    message: Message,
    actor_tg_id: int,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º actor_tg_id –∏–∑ middleware
    users: UsersService,
    assignments: AssignmentsService,
):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –¢–ê –¥–ª—è –Ω–µ–¥–µ–ª–∏ –∏ –¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –µ–≥–æ —Å–ª–æ—Ç–∞–º.
    /week [–Ω–æ–º–µ—Ä_–Ω–µ–¥–µ–ª–∏]
    """
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /week [–Ω–æ–º–µ—Ä_–Ω–µ–¥–µ–ª–∏]")
        return
    
    try:
        week = int(parts[1])
    except ValueError:
        await message.answer("–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ student_code
    user = users.get_by_tg(actor_tg_id)
    if not user or user.get("role") != "student":
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /register")
        return

    # –ü–æ–ª—É—á–∞–µ–º student_code –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    student_code = user.get("id") or user.get("student_code")
    if not student_code:
        await message.answer("–í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω student_code. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
    ta_code = assignments.get_assignment_for_student_code(str(student_code), week)
    if not ta_code:
        await message.answer(f"–î–ª—è –Ω–µ–¥–µ–ª–∏ {week} –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ.")
        return

    ta_label, ta_id = _ta_present(users, ta_code)
    lines = [f"–ù–µ–¥–µ–ª—è {week}: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {ta_label}."]
    kb = InlineKeyboardBuilder()
    if ta_id:
        kb.button(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ—Ç—ã —ç—Ç–æ–≥–æ –¢–ê", callback_data=f"wk:slots:{ta_code}:{week}")

    await message.answer("\n".join(lines), reply_markup=kb.as_markup() if ta_id else None)


@router.callback_query(F.data.startswith("wk:slots:"))
async def show_ta_slots(
    cb: CallbackQuery,
    users: UsersService,
    slots: SlotService,
    bookings: BookingService,
):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¢–ê (–±—É–¥—É—â–∏–µ, –æ—Ç–∫—Ä—ã—Ç—ã–µ, —Å –º–µ—Å—Ç–∞–º–∏).
    callback: wk:slots:<ta_code>:<week>
    """
    try:
        _, _, ta_code, week_str = _s(cb.data).split(":", 3)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
        return

    ta_label, ta_id = _ta_present(users, ta_code)
    if not ta_id:
        await cb.answer("–£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–¥–∞–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π TA-ID (users.id)", show_alert=True)
        return

    sdf = slots.table.read()
    bdf = bookings.table.read()
    df = _filter_slots_for_ta(sdf, bdf, ta_id, slots)
    if df is None or df.empty:
        await cb.message.edit_text(f"–°–ª–æ—Ç—ã {ta_label} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±–ª–∏–∂–∞–π—à–∏—Ö).")
        await cb.answer()
        return

    kb = InlineKeyboardBuilder()
    df = df.sort_values(["__start_ts", "__slot_id"])
    for _, row in df.iterrows():
        label = _slot_brief_row(
            row.get("__start_ts"), 
            row.get("__end_ts"), 
            _s(row.get("__mode")), 
            _s(row.get("__place")), 
            int(row.get("__remains") or 0)
        )
        slot_id = _s(row.get("__slot_id"))
        kb.button(text=f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è: {label}", callback_data=f"wk:book:{ta_code}:{slot_id}")
    kb.adjust(1)

    await cb.message.edit_text(f"–°–ª–æ—Ç—ã {ta_label}:", reply_markup=kb.as_markup())
    await cb.answer()


@router.callback_query(F.data.startswith("wk:book:"))
async def book_slot(
    cb: CallbackQuery,
    actor_tg_id: int,
    users: UsersService,
    bookings: BookingService,
    slots: SlotService,
):
    """
    –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: —Å–ª–æ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π, –±—É–¥—É—â–∏–π, –µ—Å—Ç—å –º–µ—Å—Ç–∞, —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–∞–ø–∏—Å–∞–Ω.
    callback: wk:book:<ta_code>:<slot_id>
    """
    try:
        _, _, ta_code, slot_id = _s(cb.data).split(":", 3)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    # –ù–∞–π–¥—ë–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    stu = users.get_by_tg(actor_tg_id)
    if not stu or _s(stu.get("role")) != "student":
        await cb.answer("–ë—Ä–æ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞
    found, slot_dict = slots.get_slot_by_id(slot_id)
    if not found:
        await cb.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        bdf = bookings.list_for_slot(slot_id)
        current_bookings = 0
        if not bdf.empty:
            # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if "status" in bdf.columns:
                active_bookings = bdf[bdf["status"].str.lower().isin(["active", "confirmed"])]
                current_bookings = len(active_bookings)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç
                student_bookings = active_bookings[
                    active_bookings["student_tg_id"].astype(str) == str(actor_tg_id)
                ]
                if not student_bookings.empty:
                    await cb.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç.", show_alert=True)
                    return
            else:
                current_bookings = len(bdf)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏
                student_bookings = bdf[bdf["student_tg_id"].astype(str) == str(actor_tg_id)]
                if not student_bookings.empty:
                    await cb.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç.", show_alert=True)
                    return
    except Exception:
        current_bookings = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
    computed_status = slots.get_computed_status(slot_dict, current_bookings)
    
    if computed_status not in ("free_full", "free_partial"):
        status_messages = {
            "busy": "–ú–µ—Å—Ç —É–∂–µ –Ω–µ—Ç.",
            "closed": "–°–ª–æ—Ç –∑–∞–∫—Ä—ã—Ç.",
            "canceled": "–°–ª–æ—Ç –æ—Ç–º–µ–Ω—ë–Ω.",
            "pasted": "–°–ª–æ—Ç —É–∂–µ –ø—Ä–æ—à–µ–ª."
        }
        await cb.answer(status_messages.get(computed_status, "–°–ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."), show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –º–µ—Å—Ç
    capacity = int(slot_dict.get("capacity", 1))
    if current_bookings >= capacity:
        await cb.answer("–ú–µ—Å—Ç —É–∂–µ –Ω–µ—Ç.", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        from datetime import datetime, timezone
        booking_row = {
            "slot_id": slot_id,
            "student_tg_id": actor_tg_id,
            "status": "active",
            "created_at": datetime.now(timezone.utc).isoformat(),
            "comment": ""
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ CSV —Ç–∞–±–ª–∏—Ü—É
        bookings.table.append_row(booking_row)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        date_str = slot_dict.get('date', '')
        time_from = slot_dict.get('time_from', '')
        time_to = slot_dict.get('time_to', '')
        mode = slot_dict.get('mode', 'online')
        location = slot_dict.get('location', '')
        meeting_link = slot_dict.get('meeting_link', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ—Å—Ç–∞
        place_info = ""
        if mode == "online":
            if meeting_link:
                place_info = f"\nüîó {meeting_link}"
            else:
                place_info = "\nüíª –û–Ω–ª–∞–π–Ω"
        else:
            if location and location != "–ê—É–¥–∏—Ç–æ—Ä–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é":
                place_info = f"\nüè´ {location}"
            else:
                place_info = "\nüè´ –û—á–Ω–æ (–º–µ—Å—Ç–æ —É—Ç–æ—á–Ω–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)"

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
        new_bookings = current_bookings + 1
        new_status = slots.get_computed_status(slot_dict, new_bookings)
        
        status_suffix = ""
        if new_status == "busy":
            status_suffix = " (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ)"
        elif new_status == "free_partial":
            remaining = capacity - new_bookings
            status_suffix = f" (–æ—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {remaining})"

        await cb.message.edit_text(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–æ—Ç{status_suffix}!\n"
            f"üìÖ {date_str} {time_from}-{time_to}"
            f"{place_info}"
        )
        await cb.answer("–ì–æ—Ç–æ–≤–æ!")
        
    except Exception as e:
        await cb.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {str(e)}", show_alert=True)