from __future__ import annotations
import os
from datetime import datetime, date, timedelta
from typing import List, Dict, Optional
import pandas as pd
from app.repositories.csv_repo import CsvTable

WEEKS_COLUMNS = ["week", "title", "description"]

class WeeksService:
    def __init__(self, data_dir: str):
        self.table = CsvTable(os.path.join(data_dir, "weeks.csv"), WEEKS_COLUMNS)
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤
        self.WEEK_1_START = date(2025, 8, 27)  # 27-08-2025
        self.WEEK_1_DEADLINE = date(2025, 9, 6)  # 06-09-2025
        
    def list_all_weeks(self) -> pd.DataFrame:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–µ–¥–µ–ª–∏ —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏"""
        df = self.table.read()
        if df.empty:
            return df
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
        df_enriched = df.copy()
        df_enriched["deadline_date"] = df_enriched["week"].apply(self._calculate_deadline)
        df_enriched["is_overdue"] = df_enriched["deadline_date"].apply(self._is_overdue)
        df_enriched["status_emoji"] = df_enriched["is_overdue"].apply(
            lambda overdue: "üî¥" if overdue else "üü¢"
        )
        
        return df_enriched.sort_values("week")
    
    def get_week(self, week_number: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–µ"""
        df = self.table.read()
        if df.empty:
            return None
            
        week_data = df[df["week"] == week_number]
        if week_data.empty:
            return None
            
        week_dict = week_data.iloc[0].to_dict()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
        week_dict["deadline_date"] = self._calculate_deadline(week_number)
        week_dict["is_overdue"] = self._is_overdue(week_dict["deadline_date"])
        week_dict["status_emoji"] = "üî¥" if week_dict["is_overdue"] else "üü¢"
        week_dict["deadline_str"] = week_dict["deadline_date"].strftime("%d.%m.%Y")
        
        return week_dict
    
    def _calculate_deadline(self, week_number: int) -> date:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –Ω–µ–¥–µ–ª–∏: 1 –Ω–µ–¥–µ–ª—è = 06.09.2025, –∫–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è +7 –¥–Ω–µ–π"""
        days_offset = (week_number - 1) * 7
        return self.WEEK_1_DEADLINE + timedelta(days=days_offset)
    
    def _is_overdue(self, deadline_date: date) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –Ω–µ–¥–µ–ª—è"""
        today = date.today()
        return today > deadline_date
    
    def get_current_weeks(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 3 –±–ª–∏–∂–∞–π—à–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ (–Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ)"""
        df = self.list_all_weeks()
        if df.empty:
            return []
            
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
        current_weeks = []
        for _, row in df.iterrows():
            week_dict = row.to_dict()
            if not week_dict["is_overdue"]:
                current_weeks.append(week_dict)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –Ω–µ–¥–µ–ª—å
                if len(current_weeks) >= 3:
                    break
                    
        return current_weeks
    
    def get_all_weeks(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–µ–¥–µ–ª–∏"""
        df = self.list_all_weeks()
        if df.empty:
            return []
        
        all_weeks = []
        for _, row in df.iterrows():
            week_dict = row.to_dict()
            all_weeks.append(week_dict)
            
        return all_weeks
    
    def format_week_button_text(self, week_dict: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–¥–µ–ª–∏ (–±–µ–∑ —Å—Ç–∞—Ç—É—Å-—ç–º–æ–¥–∑–∏)"""
        week_num = week_dict["week"]
        title = week_dict["title"]
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if len(title) > 30:
            title = title[:27] + "..."
            
        return f"{week_num}. {title}"
    
    def populate_from_csv(self, csv_path: str) -> None:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç weeks.csv –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ Weeks_CSV_Preview.csv"""
        try:
            # –ß–∏—Ç–∞–µ–º –≤–∞—à CSV
            source_df = pd.read_csv(csv_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_cols = ["week", "title", "description"]
            if not all(col in source_df.columns for col in required_cols):
                raise ValueError(f"CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {required_cols}")
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            weeks_df = source_df[required_cols].sort_values("week")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ weeks.csv
            with self.table.lock:
                weeks_df.to_csv(self.table.path, index=False)
                
            print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(weeks_df)} –Ω–µ–¥–µ–ª—å –≤ weeks.csv")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            raise